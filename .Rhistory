install.packages("dplyr")
install.packages("STAT")
install.packages(c("xtable", "ggplot2", "DistributionFitR", "DistributionTest"))
install.packages("vioplot")
install.packages("dplyr")
install.packages(c("devtools", "foreign", "cluster", "ggplot2", "rcpp", "stringr", "stringi", "reshape2", "dbi", "odbc", "rmysql", "xlconnect", "xlsx", "haven", "tidyr", "lubridate", "ggivs", "rgi", "htmlwidgets", "googlevis", "car", "mgcv", "lme4", "randomforest", "multcomp", "vcd", "glmnet", "survival", "caret", "shiny", "markdown", "xtable", "sp", "maptools", "maps", "ggmap", "zoo", "xts", "quantmmod", "data.table", "parallel", "xml"))
installed.packages()
# Vectors
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")
t[1]
# negative index means "omitt" the element
t[-1]
mkdir('test1')
mkdir
# The minimum number of digits to the right of the decimal point.
result <- format(23.47, nsmall = 5)
print(result)
result <- format(6)
print(result)
# Left justify strings.
result <- format("Hello", width = 8, justify = "l")
print(result)
# Justfy string with center.
result <- format("Hello", width = 8, justify = "c")
print(result)
# chaning the length of a variable
alpha <-c(1:10)
alpha <-alpha[2*(1:5)]
length(alpha)<-3
# empty nemeric and character variables
e<-numeric()
cc<-character()
e[3]<-4
# other string related functions
result <- nchar("Count the number of characters")
print(result)
# Changing to Upper case.
result <- toupper("Changing To Upper")
print(result)
# Changing to lower case.
result <- tolower("Changing To Lower")
print(result)
# Extract characters from 5th to 7th position.
result <- substring("Extract", 5, 7)
print(result)
result
resut[-1]
result[-1]
result[1]
# Vectors
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")
t[1]
# negative index means "omitt" the element
t[-1]
t
result
substring(result, 1,2)
install.packages("Hmisc")
install.packages(c("dplyr", "foreign", "xlsx", "xtable", "ggplot2", "STAT", "DistributionFitR"))
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
version()
install.packages(c("shiny", "lubridate"))
library(help="stats")
library("stats")
install.packages(c("psych", "psychtools"))
getwd()
clear
ls()
rm(alpha)
rm(e)
rm(mylst=ls())
rm(mylst=ls())
rm(list=ls())
a = ls()
a
a = c(1, 2, 4, 54)
b<-c(rep([2, 3, 4], times=2))
b<-c(rep(c([2, 3, 4]), times=2))
b<-rep(c([2, 3, 4]), times=2)
b<-rep([2, 3, 4], times=2)
b<-rep(c(2, 3, 4), times=2)
a<-ls()
d<-ls()
rm(d)
list
list.dirs()
rm(l<-ls())
ll<-ls()
ll
rm(ll[1])
ll
ll[1]
ll
rm(ll[])
ll[]
data("iris")
iris
head(iris)
iris[Sepal.length]
iris["Sepal.length"]
iris["Sepal.Length"]
iris[Sepal.Length]
asdf
iris[1]
head(iris)
iris$Sepal.Length
mtcars$mpg
data()
mtcars
head(mtcars)
mean(mtcars$mpg)
install.packages(c("projecttemplate", "Hmisc"))
install.packages("ProjectTemplate")
q
q()
version
install.packages(c("stringi", "stringr", "installr"))
install.packages("rmarkdown")
a<- [1 23]
a<- [1, 23]
a<- c(1, 23)
a
a<-vector(1:3)
a<-paste([2, 2, 3, 3, 4])
a<-paste(2, 2, 3, 3, 4)
a
a<-c(2, 2, 3, 3, 4)
a
a<-a
a
a*2
q()
as.matrix(1:10)
as.matrix(1:10, nrows=2)
as.matrix(1:10, nrow(3))
help("as.matrix")
a<-matrix(1:10, nrows=2)
a<-matrix(1:10, nrow=2)
a
# creating a matrix
a<- matrix(1:10, nrow=2, byrow=TRUE)
b<-c(10:22)
c<-matrix(b, nrow=2)
# creating a matrix
a<- matrix(1:10, nrow=2, byrow=TRUE)
b<-c(1:22)
c<-matrix(b, nrow=2)
a
b
c
view(c)
view(a)
view(a)
View(a)
normalizePath()
normalizePath(.)
normalizePath(".")
normalizePath(".")
dirname("SPSS_data_process.R")
dirname
dirname
ls()
list.files()
dirname("SPSS_data_process.R")
setwd("C:/Users/ksung/OneDrive/R/SPSS_tDCS_data")
dirname("SPSS_data_process.R")
dirname()
dirname(".")
normalizePath("SPSS_data_process.R")
help("normalizePath")
normalizePath("SPSS_data_process.R", winslash = "\")
:
asdf
""
\
\\
exit
"\\"
normalizePath("SPSS_data_process.R", winslash = "/")
setwd("C:/Users/ksung/OneDrive/R")
normalizePath("SPSS_data_process.R", winslash = "/")
normalizePath("SPSS_tDCS_data/SPSS_data_process.R", winslash = "/")
# finding a path of a file
normalizePath("SPSS_tDCS_data/SPSS_data_process.R", winslash ="/")
setwd("C:/Users/ksung/OneDrive/R/SPSS_tDCS_data")
library(foreign)
# finding a path of a file
normalizePath("SPSS_data_process.R", winslash ="/")
mydata <- read.spss("tDCS_visualsearch_exp1.sav", to.data.frame = TRUE,
use.value.labels=TRUE, max.value.labels=12)
View(mydata)
mydata2 <- subset(mydata, select = -c(filter_., OriginalID))
mydata3 <- subset(mydata, select = c(Stimulation))
mydata4 <- subset(mydata, select = "Stimulation")
mydata5 <- mydata[c("RT", "Stimulation")]
View(mydata2)
a<-c("x", "y")
a[1]
a
x <-c(1, 2, 3, 4, 5, 3, NA)
y <-x[!is.na(x)]
# naming a vector
fruit <- c(1, 2, 3, 5, 6)
colnames(fruit)<-c("one", "two", "three", "four", "five")
# colnames will produce error since the fruit is a vector; it should be a matrix or dataframe
names(fruit)<-c("orange", "apple", "pear", "grape", "melon")
fruit
fruit["apple"]
fruit[c("apple", "melon")]
rm(list=ls())
datafileinput <- normalizePath("data/SPSS_data_process.R", winslash ="/")
# finding a path of a file
datafileinput <- normalizePath("data//SPSS_data_process.r", winslash ="/")
# finding a path of a file
datafileinput <- normalizePath("SPSS_data_process.r", winslash ="/")
# finding a path of a file
datafileinput <- normalizePath("SPSS_data_process.r", winslash ="/")
datafileinput <- normalizePath("data/tDCS_visualsearch_exp1.sav", winslash ="/")
library(foreign)
# finding a path of a file
datafileinput <- "data/tDCS_visualsearch_exp1.sav"
mydata <- read.spss(datafileinput, to.data.frame = TRUE,
use.value.labels=TRUE, max.value.labels=12)
